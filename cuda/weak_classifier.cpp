#include <iostream>
#include <cmath>
#include <cstdlib>
using namespace std;

#define SIZE 14*14
#define X_SIZE 14
#define Y_SIZE 14

//Function prototype
int SAT(int, int, int, int, int);

//Global variable
//Create big ass array for test char
	unsigned char num[3*SIZE] = {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 191, 127, 255, 255, 191, 127, 20 , 255, 255, 255,
					 		     255, 255, 255, 255, 127, 0  , 255, 255, 127, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 127, 0  , 40 , 40 , 230, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 175, 127, 127, 127, 235, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 127, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 127, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 127, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 245, 220, 245, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 127, 120, 180, 125, 120, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 245, 255, 255, 255, 100, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 110, 252, 252, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 120, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 128, 0  , 45 , 127, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 250, 20 , 240, 30 , 252, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 250, 15 , 15 , 235, 205, 135, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		 	 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 150, 50 , 255, 255, 191, 127, 30 , 255, 255, 255,
					 		     255, 255, 255, 255, 120, 0  , 255, 235, 127, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 113, 0  , 40 , 40 , 230, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 175, 150, 127, 127, 235, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 127, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 127, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 127, 0  , 235, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 45 , 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
					 		     255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255};

int main(int argc, char*argv[])
{
	int label[3];
	label[0] = atoi(argv[1]);
	label[1] = atoi(argv[2]);
	label[2] = atoi(argv[3]);

	int i = 0;

	int hi = atoi(argv[4]);

	int theta = 0;
	int min_theta = 0;

	int e = 0;
	int min_e = INFINITY;

	int f = 0;
	int comp = 0;
		
	for(int x = 0; x < 14; x++)
	{
		for(int y = 0; y < 14; y++)
		{
			for(int h = 1; h <= 15 - y; h++)
			{
				for(int w = 1; w <= (15 - x)/2; w++)
				{
					theta = hi;
					i++;

					while(theta > 0)
					{
						e = 0;

						for(int img = 0; img < 3; img++)
						{
							//Compute features and classify with them
							f = SAT(x, y, x+w-1, y+h-1, img) - SAT(x+w, y, x+2*w-1, y+h-1, img);
							comp = abs(f - 255*w*h);
							//cout << "feature value (" << x << " " << y << " " << w << " " << h << " " << theta << " " << img << "): " << abs(f) << ", comp: " << comp << endl;

							if(comp < theta)
							{
								if(label[img] == -1)
								{
									e++;
								}
							}
							else
							{
								if(label[img] == 1)
								{
									e++;
								}
							}
						}

						//Keep track of current best theta value
						if(e <= min_e)
						{
							min_e = e;
							min_theta = theta;
						}
							
						//Compute new threshold bounds based on number of misclassifications
						theta--;

						/*//Display classification info
						cout << "\tNumber misclassified:" << endl;
						cout << "\t---------------------" << endl;
						cout << "\te: " << e << endl;
				
						cout << "\tNew theta bounds:" << endl;
						cout << "\t-----------------" << endl;
						cout << "\ttheta: " << theta << endl << endl;*/
					}

					cout << "==========================" << endl;
					cout << "feature(" << x << ", " << y << ", " << w << ", " << h << ")" << endl;
					cout << "Best theta classifier: " << min_theta << endl;
					cout << "Number misclassified:  " << min_e << endl;
					cout << "==========================" << endl << endl;
				}
			}
		}
	}

	cout << "Total number of features: " << i << endl;
	cout << "Memory size for array to hold feature values: " << i*sizeof(int) << " B" << endl << endl;

	return 0;
}

//Function SAT
int SAT(int x1, int y1, int x2, int y2, int img)
{
	unsigned int area = 0;
	for(int j = y1; j <= y2; j++)
	{
		for(int i = x1; i <= x2; i++)
		{
			area += num[img*SIZE + j*X_SIZE + i];
		}
	}
	return area;
}